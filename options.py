import mysql.connector
def connect_to_database():
    try:
        conn = mysql.connector.connect(
            host = '34.82.166.112',
            port = '3306',
            user = 'root',
            password = '/IJ})"Hm#v.2N9xP',
            database = 'fall2023_cpsc408'
        )
        return conn
    except mysql.connector.Error as e:
        print(f"Error connecting to MySql: {e}")
        return None

cursor = connect_to_database().cursor()
def optionOne():
    print("Printing all out of stock items:")
    try:
        with connect_to_database() as conn:
            with conn.cursor() as cursor:
                cursor.execute('SELECT ProductName, UnitPrice FROM Products WHERE UnitsInStock = 0')
                rows = cursor.fetchall()
                for row in rows:
                    product_name, unit_price = row
                    print(f'Product: {product_name} | Unit Price: ${float(unit_price)}')
        print('\n')
    except Exception as e:
        print(f"Error: {e}")
def optionTwo():
    print("Finding total number of orders by each customer:")
    try:
        with connect_to_database() as conn:
            with conn.cursor() as cursor:
                cursor.execute('''
                SELECT Customers.CustomerName, COUNT(Orders.CustomerID) as totalCount FROM Orders
                               join Customers on Orders.CustomerID = Customers.CustomerID
                               group by Orders.CustomerID''')
                rows = cursor.fetchall()
                for row in rows:
                    customerName, totalCount = row
                    print(f'Customer: {customerName} | Number of Orders: {totalCount}')
        print('\n')
    except Exception as e:
        print(f"Error: {e}")

def optionThree():
    print("Finding most expensive product in each order:")
    try:
        with connect_to_database() as conn:
            with conn.cursor() as cursor:
                cursor.execute('''
                    SELECT Products.ProductName,OrderDetails.OrderID,OrderDetails.UnitPrice as highestPrice,
                    Products.UnitsInStock
                    FROM OrderDetails
                    JOIN Products ON OrderDetails.ProductID = Products.ProductID
                    JOIN (
                        SELECT 
                            OrderID,
                            MAX(UnitPrice) AS MaxPrice
                        FROM 
                            OrderDetails
                        GROUP BY 
                            OrderID
                    ) AS MaxPrices ON OrderDetails.OrderID = MaxPrices.OrderID AND OrderDetails.UnitPrice = MaxPrices.MaxPrice
                    ORDER BY 
                        OrderDetails.OrderID
                ''')
                rows = cursor.fetchall()
                for row in rows:
                    productName, orderID, highestPrice, stock = row
                    print(f'OrderID: {orderID} | Product Name: {productName} | Price: {highestPrice} | # in Stock: {stock}')
        print('\n')
    except Exception as e:
        print(f"Error: {e}")

def optionFour():
        print("List of products that have never been ordered:")
        try:
            with connect_to_database() as conn:
                with conn.cursor() as cursor:
                    cursor.execute('''
                        SELECT Products.ProductID, Products.ProductName
                        FROM Products
                        LEFT JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID
                        WHERE OrderDetails.ProductID IS NULL
                    ''')
                    rows = cursor.fetchall()
                    for row in rows:
                        product_id, product_name = row
                        print(f'Product ID: {product_id} | Product Name: {product_name}')
            print('\n')
        except Exception as e:
            print(f"Error: {e}")

def optionFive():
        print("Total revenue generated by each supplier:")
        try:
            with connect_to_database() as conn:
                with conn.cursor() as cursor:
                    cursor.execute('''
                        SELECT
                            Suppliers.SupplierID,
                            Suppliers.SupplierName,
                            SUM(OrderDetails.UnitPrice * OrderDetails.Quantity) AS TotalRevenue
                        FROM
                            Suppliers
                        JOIN Products ON Suppliers.SupplierID = Products.SupplierID
                        JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID
                        GROUP BY
                            Suppliers.SupplierID, Suppliers.SupplierName
                        ORDER BY
                            SupplierID asc
                    ''')
                    rows = cursor.fetchall()
                    for row in rows:
                        supplier_id, supplier_name, total_revenue = row
                        print(
                            f'Supplier ID: {supplier_id} | Supplier Name: {supplier_name} | Total Revenue: ${total_revenue}')
            print('\n')
        except Exception as e:
            print(f"Error: {e}")

def optionSix():
    print("Here is a list of customers and their IDs as well as products and their IDs\n")
    try:
        with connect_to_database() as conn:
            with conn.cursor() as cursor:
                cursor.execute('SELECT ProductID, ProductName, UnitsInStock FROM Products')
                rows = cursor.fetchall()
                for row in rows:
                    productID, productName, units = row
                    print(f'Product ID: {productID} | Product Name: {productName} | Units in stock: {units}')
        print('\n')
    except Exception as e:
        print(f"Error: {e}")
        print("\n")
    try:
        with connect_to_database() as conn:
            with conn.cursor() as cursor:
                cursor.execute('SELECT CustomerID, CustomerName FROM Customers')
                rows = cursor.fetchall()
                for row in rows:
                    customerID, customerName = row
                    print(f'Customer ID: {customerID} | Customer name: {customerName}')
        print('\n')
    except Exception as e:
        print(f"Error: {e}")
    while True: # select customer
        customerSelection = input("Which customer would you like to have order? Enter their ID\n")
        try:
            customerSelection = int(customerSelection)
            if 1 <= customerSelection <= 10:
                print("You chose customer:", customerSelection)
                break
            else:
                print("Error: Customer doesn't exist")
        except ValueError:
            print("Error: Please enter an INTEGER value")
    while True:
        ProductSelection = input("Which product would you like to order? Enter its ID\n")
        try:
            ProductSelection = int(ProductSelection)
            if 1 <= ProductSelection <= 11:
                print("You chose product: ", ProductSelection)
                break
            else:
                print("Error: Product doesn't exist")
        except ValueError:
            print("Error: Please enter an INTEGER value")
    quantityBool = 0
    while quantityBool == 0:
        quantitySelection = input(f"How much of product order [{ProductSelection}] would you like to order?\n")
        try:
            quantitySelection = int(quantitySelection)
            if quantitySelection >= 1:
                print(f"Quantity chosen: {quantitySelection}")
                quantityBool = 1
            else:
                print("Error: Quantity must be >= 0")
        except ValueError:
            print("Error: Please enter an INTEGER value")
    addNewOrder(customerSelection, ProductSelection, quantitySelection)


# stored procedures
def addNewOrder(customerID, productID, quantity):
    try:
        conn = connect_to_database()
        if conn:
            with conn.cursor() as cursor:
                # Check if customer_id and product_id exist
                cursor.execute('SELECT COUNT(*) FROM Customers WHERE CustomerID = %s', (customerID,))
                customer_exists = cursor.fetchone()[0] > 0

                cursor.execute('SELECT COUNT(*) FROM Products WHERE ProductID = %s', (productID,))
                product_exists = cursor.fetchone()[0] > 0

                cursor.execute('SELECT UnitsInStock FROM Products WHERE ProductID = %s', (productID,))
                enoughStock = cursor.fetchone()[0] >= quantity

                if not customer_exists or not product_exists:
                    print("Error: Customer or product doesn't exist.\n")
                    return

                if not enoughStock:
                    print("Error: Not enough stock of given product ID\n")
                    return

                # print(f"Data c, p ,q: {customerID}, {productID}, {quantity}") CHECKING TO MAKE SURE DATA CORRECT
                cursor.callproc('AddNewOrder', (customerID, productID, quantity))
                print("Order successful")

            conn.commit()
    except Exception as e:
        print(f"Error adding new order: {e}")
    finally:
        if conn:
            conn.close()